3.2.2 Find Maximum Element: Implement a function to find and return the maximum value
in an integer array

C lang:

int *ptr = arr;   // Declare a pointer 'ptr' and initialize it to point at the beginning of the array 'arr'.
int max = *ptr;   // Initialize 'max' to the value pointed by 'ptr', which is the first element of the array.

start_loop:       // A label used for the 'goto' statement, marking the beginning of the loop.
if (ptr < arr + len) { // Check if the pointer 'ptr' is still within the array bounds.
    if (*ptr > max) {  // Dereference 'ptr' to get the current element and compare it with 'max'.
        max = *ptr;    // If the current element is greater than 'max', update 'max' to this new value.
    }

    ptr++;             // Increment the pointer to move to the next element in the array.
    goto start_loop;   // Unconditionally jump back to the 'start_loop' label, effectively creating a loop.
}




Code in NASM:

section .text
global find_max
find_max:
    ; Parameters:
    ; rdi - pointer to the array
    ; rsi - number of elements in the array

    ; Check if the array has no elements (n == 0)
    test rsi, rsi                ; Tests if n == 0
    jz .empty                    ; If zero, jump to empty handling code

    ; Initialize max with the value of the first element
    mov rax, [rdi]               ; Move first element of the array into rax (max)

    ; If there's only one element, return it
    dec rsi                      ; Decrement n for loop (since we've read one element already)
    jz .done                     ; If there are no more elements, return

    ; Set up for loop to go through the array
    xor rcx, rcx                ; Counter set to 0
    add rcx, 1                  ; Start counter at 1 (second element)
    shl rcx, 2                  ; rcx *= 4 (to use as an offset in the array addressing)

.loop:
    cmp rax, [rdi + rcx]         ; Compare max with the current element
    jge .next                    ; If max is greater or equal, move to next
    mov rax, [rdi + rcx]         ; Otherwise, update max
.next:
    add rcx, 4                   ; Move to the next element (4 bytes per element)
    cmp rcx, rsi                 ; Compare counter with n (in bytes)
    jl .loop                     ; If counter less than n, keep looping

.done:
    ret                          ; Return the max value in rax

.empty:
    ; Handling empty arrays by returning a default value (let's choose 0)
    xor rax, rax                 ; Return 0 for empty array
    ret

