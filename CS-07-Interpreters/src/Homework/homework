9.1 BNF form for extended arithmetic language:
5 + 6 * 3 - 4 / 2

<expression> ::= <term> | <expression> "+" <term> | <expression> "-" <term>
<term> ::= <factor> | <term> "*" <factor> | <term> "/" <factor>
<factor> ::= <integer> | "(" <expression> ")"
<integer> ::= [ "-" ] <one_to_nine> { digit }
<digit> ::= "0" | <one_to_nine>
<one_to_nine> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

9.2 BNF form for extended arithmetic language:
5 + 6 * (45 - 3) - 4 / 2

<expression> ::= <term> | <expression> "+" <term> | <expression> "-" <term>
<term> ::= <factor> | <term> "*" <factor> | <term> "/" <factor> | "(" | ")"
<factor> ::= <base> | <integer>
<base> ::= <integer> | <variable> | "(" <expression> ")"
<integer> ::= [ "-" ] <one_to_nine> { digit }
<digit> ::= "0" | <one_to_nine>
<one_to_nine> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

9.3 Add power (^) to the previous BNF
5^3 + 6 * (45 - 3^2) - 4 / 2

<expression> ::= <term> | <expression> "+" <term> | <expression> "-" <term>
<term> ::= <factor> | <term> "*" <factor> | <term> "/" <factor>
<factor> ::= <number> | <power> | "(" expression")"
<power> ::= <base> "^" <exponent>
<base> ::= <number> | "("<expression")"
<exponent> ::= <number> | "("<expression")"
<number> ::= <digit> | <number> <digit>
<digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

9.4 Add support of exponents to our BNF form of a number
  1.0e-10, -2.71828e-2, 9.81e2

<expression> ::= <number>
<number> ::= <integer>[<fractional>]
<integer> ::= [ "-" ]( <one_to_nine>) { digit }|"0")
<digit> ::= "0" | <one_to_nine>
<one_to_nine> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<fractional> ::="."<variable>+
<variable> ::= <digit><letter>|"-"|<digit>
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<letter> ::= "e"

9.6 BNF for part of Python (identifier ex x = 5)

<expression> ::= <assignment>; | <control structure> | <function>
<assignment> ::= <identifier> “=” expression
<identifier> ::= "x" | "y"
<control structure> ::= "if" |"else"
<function> ::= "print"

____________updated from the lecture
<expression> ::= <term> | <expression> "+" <term> | <expression> "-" <term>
<term> ::= <factor> | <term> "*" <factor> | <term> "/" <factor>
<factor> ::= <number> | <identifier> | "(" expression")"
<identifier> ::= <letter> | <identifier> <letter_or_digit>
<letter_or_digit> ::= <letter> | <digit>
<letter> ::= "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|
"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|
|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"|
<number> ::= <digit> | <number> <digit>
<digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"


_____________
<program> ::= <statement> | <program><separator><statement>
<statement> ::= <expression> | <if_statement>
<separator> ::= "\n"|";"
<if_statement> ::= "if" <condition>"{"<program>"}"<else_statement>?
<else_statement> ::="else""{"<program>"}"
<condition> ::= "("<expression><comparison><expression>")"
<comparison> ::= "<" | ">" |"==" | "<=" |">=" | "!="
<expression> ::= <term> | <expression> "+" <term> | <expression> "-" <term>
<term> ::= <factor> | <term> "*" <factor> | <term> "/" <factor>
<factor> ::= <number> | <identifier> | "(" expression")"
<identifier> ::= <letter> | <identifier> <letter_or_digit>
<letter_or_digit> ::= <letter> | <digit>
<letter> ::= "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|
"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|
|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"|
<number> ::= <digit> | <number> <digit>
<digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"


